using System;
using System.Collections.Generic;
using System.Linq;

namespace PairDuplicate
{
    class Program
    {
        static void Main(string[] args)
        {
            string pairs = "ETH-PLN;ETH-PLN;CRON-BTC;SGR-BTC;ETH-LTC;USDC-USDT;XMR-UAH;DOGE-BTC;PRQ-BTC;OMG-ETH;EOS-BTC;BCH-ETH;DAI-USD;NEO-RUB;ETH-UAH;USDT-UAH;WAVES-BTC;MNC-USD;GNT-ETH;XTZ-EXM;TRX-BTC;DOGE-USD;PRQ-EXM;BTG-USD;BCH-EUR;DCR-BTC;BCH-USDT;QTUM-ETH;XMR-USD;ALGO-RUB;EXM-ETH;CHZ-EXM;IQN-USDT;ONT-EXM;USDT-GBP;BCH-BTC;ZEC-BTC;ATOM-USD;WXT-EXM;ZAG-BTC;QTUM-BTC;DASH-UAH;SMART-RUB;DASH-USDT;ALGO-USDT;PTI-USDT;XTZ-BTC;XRP-TRY;ONG-BTC;BTC-TRY;LTC-RUB;XLM-RUB;XLM-BTC;BTT-UAH;CHZ-BTC;ATOM-EXM;USDC-ETH;EXM-BTC;ETH-TRY;ETZ-BTC;DASH-BTC;EOS-USD;BTG-BTC;XRP-USDT;USDC-USD;BTT-RUB;LTC-EUR;ETC-BTC;BTC-KZT;CRON-EXM;SMART-BTC;OMG-BTC;GUSD-RUB;GUSD-USD;ONG-RUB;NEO-BTC;TRX-UAH;BTC-EUR;XEM-EUR;BTC-RUB;TRX-RUB;QTUM-USD;ETH-USDT;ETH-BTC;ETZ-USDT;ADA-USD;ATOM-BTC;ZEC-RUB;ETC-USD;ALGO-BTC;BCH-USD;SMART-USD;ETZ-ETH;IQN-EXM;ONG-EXM;CRON-USDT;SGR-EXM;BTC-PLN;LSK-BTC;PTI-BTC;USDT-USD;TRX-USD;OMG-USD;GAS-BTC;DCR-UAH;XLM-USD;WAVES-RUB;BTG-ETH;HAI-EXM;XMR-EUR;ETH-GBP;ALGO-EUR;XRP-USD;MNC-ETH;ALGO-EXM;ZEC-EUR;BTC-USDT;USDC-BTC;USDT-KZT;LTC-UAH;PTI-EOS;XRP-GBP;SMART-EUR;WXT-BTC;MKR-DAI;NEO-USD;XEM-BTC;ZRX-ETH;XRP-BTC;BTC-UAH;BCH-RUB;ETH-USD;GUSD-BTC;MKR-BTC;ADA-BTC;IQN-BTC;BTC-USD;USDT-EUR;XRP-UAH;GNT-BTC;MNC-BTC;USDT-RUB;XTZ-RUB;ETH-EUR;ONE-BTC;DCR-RUB;BCH-UAH;XTZ-USD;TRX-EUR;LSK-RUB;ZRX-USD;DAI-BTC;XRP-EUR;DAI-RUB;ATOM-EUR;ONT-BTC;XEM-UAH;LTC-USD;ONT-RUB;GAS-USD;ROOBEE-BTC;ONE-EXM;LTC-BTC;ADA-ETH;HB-BTC;BTT-BTC;DAI-ETH;ETH-KZT;EXM-USDT;ETC-RUB;SGR-USDT;WAVES-USD;ETH-RUB;PTI-RUB;XRP-RUB;BTC-GBP;XMR-ETH;DASH-RUB;ONT-UAH;XLM-TRY;HP-BTC;ZEC-USD;XRP-ETH;XMR-BTC;EOS-EUR;DASH-USD;CRON-ETH;PRQ-USDT;XEM-USD;ONG-UAH;XMR-RUB;WAVES-ETH;ZRX-BTC;VLX-BTC;HAI-BTC;LSK-USD";

            Dictionary<string, int> pairsDic = new Dictionary<string, int>();
            foreach (var pair in pairs.Split(';'))
            {
                try
                {
                    pairsDic.Add(pair, 1);
                }
                catch (Exception)
                {
                    pairsDic[pair]++;
                }
            }

            var temp = pairsDic.Where(x => x.Value > 1);
            foreach (var item in temp)
            {
                Console.WriteLine($"{item.Key} - {item.Value}");
            }
        }
    }
}
